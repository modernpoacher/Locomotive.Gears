'use strict';Object.defineProperty(exports,"__esModule",{value:true});let pattern;const map=new Map();const PATTERN='/:alpha/:omega';const CHAR32=String.fromCharCode(32);const CHAR45=String.fromCharCode(45);const any=o=>!!Reflect.ownKeys(o).length;const has=(o,k)=>Reflect.has(o,k);const get=(o,k)=>Reflect.get(o,k);const toString=s=>(s||`${s}`).toString();const go=(o,s)=>{let b=any(o);if(b){let k;const a=s.match(/(\w+)/g);while(b&&(k=a.shift())){b=has(o,k)?!!get(o,k):false;}}return b;};const rail=s=>s.toLowerCase().replace(/[^\w\-\d]/g,CHAR32).trim().replace(/[\s]+/g,CHAR45).replace(/[\s\s|\-\-]+/g,CHAR45);class Rails{}exports.default=Rails;Rails.pattern=p=>p?pattern=toString(p):pattern||(pattern=PATTERN);Rails.rail=s=>{const k=toString(s);if(map.has(k))return map.get(k);const S=rail(k);map.set(k,S);return S;};Rails.go=(o={},s=Rails.pattern())=>any(o)?(s=toString(s))?go(o,s):false:false;Rails.to=(o={},s=Rails.pattern())=>any(o)?toString(s).replace(/(?::)(\w+)/g,(m,k)=>m?has(o,k)?get(o,k):m:m):toString(s);